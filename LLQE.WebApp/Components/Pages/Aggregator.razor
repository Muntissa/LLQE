@page "/aggregator"
@using LLQE.Common.Entities
@using LLQE.Common.Interfaces
@using System.ComponentModel
@using Microsoft.Extensions.Options

@rendermode InteractiveServer

@inject IServiceProvider sp
@inject LLQE.Common.Services.NodeMessagesStore NodeMessagesStore
@inject IOptions<KafkaSettings> KafkaOptions

<PageTitle>Агрегатор нейросетей</PageTitle>

<h3>Отправить сообщение в Kafka</h3>

<input @bind="Message" placeholder="Введите сообщение" class="form-control" />
<button @onclick="SendMessage" class="btn btn-primary mt-2">Отправить</button>

@if (Status != null)
{
    <div class="alert alert-info mt-2">@Status</div>
}
<h3>Ответы от узлов</h3>

@foreach (var node in _kafkaSettings.NodeResponseTopics)
{
    <div>
        <p><b>@node.Value:</b></p>
        <textarea readonly class="form-control" rows="4">@GetMessage(node.Value)</textarea>
    </div>
}

@code {
    private string Message { get; set; }
    private string Status { get; set; }
    private KafkaSettings _kafkaSettings;

    private IEnumerable<string> NodeNames;
    protected override void OnInitialized()
    {
        _kafkaSettings = KafkaOptions.Value;

        NodeMessagesStore.PropertyChanged += OnNodeMessageChanged;
    }

    private void OnNodeMessageChanged(object sender, PropertyChangedEventArgs e)
    {
        // StateHasChanged должен вызываться в UI-потоке
        InvokeAsync(StateHasChanged);
    }

    public string GetMessage(string nodeName) => NodeMessagesStore.GetMessage(nodeName);

    public void Dispose()
    {
        NodeMessagesStore.PropertyChanged -= OnNodeMessageChanged;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(Message))
        {
            Status = "Введите сообщение!";
            return;
        }

        try
        {
            var producerService = sp.GetRequiredService<MultiTopicProducer>();
            await producerService.ProduceToAllRequestTopicsAsync(Message);

            Status = "Сообщение отправлено в топики!";
        }
        catch (Exception ex)
        {
            Status = $"Ошибка отправки: {ex.Message}";
        }
    }
}
